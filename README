PART A - Prepare image and adjust build scripts
===============================================

Install the support scripts, either by downloading the latest code directly from GitHub <http://github.com/renggli/builder/zipball/master> or by cloning the Git repository:

	git clone git://github.com/renggli/builder.git
	
You should get a directory structure with several empty directories, this readme file and the build.sh bash script.

1. Create an initial build image that will be used as the source for all builds. Get a distribution image from <http://www.pharo-project.org/pharo-download> and unzip the image in the "images" directory.

2. Review or create your own build scripts in the directory "scripts". Use whatever loader you want: Gofer, Metacello, Mason, ... Just make sure that it is present in the source image. There are two special scripts, "before.st" is run prior to any build and "after.st" is run after any build. Make sure that the last action of the "after.st" script saves and quits the image. The other scripts load stuff. Currently this is mostly done using Gofer, but later something more sophisticated like Mason could be used. The sample builds scripts are just a starting point for creating your own build scripts for your own projects.

3. The "cache" directory contains the package cache of the builds. It is initially empty.

4. The "builds" directory is only used when the build script is called from the command-line. Normally it is and remains empty.

The generic build script build.sh works in the described directory structure. Preferably it is called from Hudson, but you can also call it from the command line. build.sh takes 3 kinds of arguments, an input image name, an output image name, and a series of scripts to load into that image. See the help for details.

PART B - Integrate with Hudson
==============================

Download hudson.war from <http://hudson-ci.org/>.

Start the Hudson server.
- run something like:
    WARFILE=$HOME/apps/hudson/hudson.war
    LOGFILE=hudson.log
    nohup java -jar $WARFILE --httpPort=9090 > $LOGFILE 2>&1 &
- port 9090 is used to avoid conflict with Seaside on 8080
- goto the Hudson dashboard at http://localhost:9090

Add new Hudson job
- from Hudson dashboard, select "New Job"
- fill in a job name, e.g. "Core"
- choose the "Build a free-style software project" radio button
- click on OK

Configure the new job
- you should be sent to the job configuration screen, after the previous step
- in the "Build" section, click "Add build step", select "Execute shell" from dropdown menu
- in the command textarea that appears, type the build specification (adapt the paths to your installation):

  #!/bin/bash

  /var/bin/builder/build.sh -i PharoCore-1.0-10505rc1 -s gofer -s settings -o core

  /var/bin/builder/build.sh -i core -s omnibrowser -o omnibrowser
  /var/bin/builder/build.sh -i omnibrowser -s testrunner -s omnibrowser-tests -o omnibrowser-tests

- in the "Post-build Actions" section, enable "Publish JUnit test result report"
- enter "**/*.xml" into the text input labelled "Test report XMLs" that appears.

- in the "Post-build Actions" section, enable "Archive the artifacts"
- enter the "Files to archive" as "**/*.image, **/*.changes", and the "Files to Exclude" as "**/*-tests.*"

- save the configuration changes.

Run the build job
- after saving the new job, you should already be in the new job's control screen. If not, you can navigate there from the dashboard.
- start a build by clicking on the "Build Now" link

DEBUGGING
=========

1. Test your build scripts in a headful image beforehand.

2. In case of problems study the "Console Output" of the failed build.

3. In most cases builds fail because of an error within the image. Click on "Workspace" and check "PharoDebug.log".

4. If the build stalls abort it and study the "Console Output" and the "PharoDebug.log" to figure out what went wrong.

HUDSON PLUGINS
==============

- The "Build timeout" plugin is useful to automatically kill and fail builds that seem to hang.

- The "URL Change Trigger" plugin is useful to automatically trigger builds when the Monticello repository changes.

- The "Green Balls" plugin makes the Hudson GUI look slightly better.
