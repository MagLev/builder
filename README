PART A - Prepare image and adjust build scripts
===============================================

Install the support scripts
- choose a build home directory, and clone the repository there
  git clone git://github.com/renggli/builder.git
- there should be an empty "images", "cache" and "builds" directory

Create an initial build image
- get a distribution image (e.g. http://www.pharo-project.org/pharo-download)
- put the image in the images directory
- this update should be part of the build script, but it was not working for me when it's run from a startup script.

Review the build scripts
- before.st is run prior to any build
- after.st is run after any build
- all the other scripts are example configurations

The cache directory contains the shared package cache of all builds. It is initially empty.

The builds directory is only used when the build script is called from the command-line and is normally empty.

The generic build script build.sh works in this directory structure. Preferably it is called from Hudson, but you can also use it from the command line.

The sample builds scripts are just a starting point for creating your own build scripts for your project.


PART B - Integrate with Hudson
==============================

Download hudson.war from http://hudson-ci.org/

Start the Hudson server.
- run something like:
    WARFILE=$HOME/apps/hudson/hudson.war
    LOGFILE=hudson.log
    nohup java -jar $WARFILE --httpPort=9090 > $LOGFILE 2>&1 &
- port 9090 is used to avoid conflict with Seaside on 8080
- goto the Hudson dashboard at http://localhost:9090

Add new Hudson job
- from Hudson dashboard, select "New Job"
- fill in a job name, e.g. "Core"
- choose the "Build a free-style software project" radio button
- click on OK

Configure the new job
- you should be sent to the job configuration screen, after the previous step
- in the "Build" section, click "Add build step", select "Execute shell" from dropdown menu
- in the command textarea that appears, type the build specification (adapt the paths to your installation):

  #!/bin/bash

  /var/bin/builder/build.sh -i PharoCore-1.0-10505rc1 -s gofer -s killtests -s settings -o core

  /var/bin/builder/build.sh -i core -s omnibrowser -o omnibrowser
  /var/bin/builder/build.sh -i omnibrowser -s testrunner -s omnibrowser-tests -o omnibrowser-tests

- in the "Post-build Actions" section, enable "Publish JUnit test result report"
- enter "**/*.xml" into the text input labelled "Test report XMLs" that appears.
- in the "Post-build Actions" section, enable "Archive the artifacts"
- enter the "Files to archive" as "**/*.image, **/*.changes", and the "Files to Exclude" as "**/*-tests.*"
- save the configuration changes (i.e. click "Save").

Run the build job
- after saving the new job, you should already be in the new job's control screen. If not, you can navigate there from the dashboard.
- start a build by clicking on the "Build Now" link

=====
HINTS
=====

1. Click on "Workspace" to see the "Wipe Out Workspace" link. If a PharoDebug.log file is generated, it will be more easy to spot, if the workspace was originally cleaned out.

2. Test your build script in a headful image beforehand. Any flaw will cause the build to stall, and you'll need to abort it (using the Hudson interface), then look at the PharoDebug.log to figure out what went wrong.

3. Hudson timeout plugin - I've not tried this yet, but if you have a build script error, your build does not abort on its own (or, I've not waited long enough).

